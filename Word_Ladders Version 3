import java.io.File;
import java.io.FileNotFoundException;
import java.util.LinkedList;
import java.util.Queue;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Scanner;
import java.util.Set;
//import java.util.TreeSet;

public class wordLadder_ver3{
  static Set<String> used = new HashSet<String>();
	static Set<String> dictionary = new HashSet<String>();
	static boolean isValidWord(String word){
		if(dictionary.contains(word))
			return true;
		return false;
	}
	static int numDiffLetters(String str1, String str2){
		int count=0;
		if(str1.compareTo(str2)==0)
			return 0;
		if(str1.length()!=str2.length())
			return -1;
		for(int i=0; i<str1.length(); i++){
			if(str1.charAt(i)!=str2.charAt(i))
				count++;
			if(count>1)
				return -1;
		}
		return count;
	}
	static void createDictionary(){
		String line ="";
		File file = new File("C:/Users/Raymond/Downloads/eclipse-SDK-4.2-win32-x86_64/eclipse/configuration/org.eclipse.osgi/bundles/156/2/.cp/dictionaries/wordsEn.txt"); //reference file
		try {
			Scanner scanner = new Scanner(file);
			while(scanner.hasNextLine()){
				line=scanner.nextLine();
				line=line.toLowerCase();
				dictionary.add(line);
			}
			scanner.close();
		}
		catch(FileNotFoundException e){
			System.out.println("File not found");
		}
	}
	static HashSet<String> oneStep(String word){
	  HashSet<String> valids = new HashSet<String>();
		for(Iterator<String> i = dictionary.iterator();i.hasNext();){
			String line = i.next();
			if(numDiffLetters(line,word)==1)
				valids.add(line);
		}
		return valids;
	}
	static ArrayList<String> createLadder(String startWord, String targetWord){
		createDictionary();
		if(startWord.length()!=targetWord.length()||!isValidWord(startWord)||!isValidWord(targetWord)){
			System.out.println("Problem with initiating.");
			return null;
		}
		startWord = startWord.toLowerCase();
		used.add(startWord);
		Queue<ArrayList<String>> q = new LinkedList<ArrayList<String>>();
		ArrayList<String> start = new ArrayList<String>();
		start.add(startWord);
		q.add(start);
		return createTheLadder(startWord, targetWord, q);
	}
	static ArrayList<String> createTheLadder(String startWord, String targetWord, Queue<ArrayList<String>> q ){
		while(!q.isEmpty()){
			ArrayList<String> current = q.poll();
			if(current.get(current.size()-1).compareTo(targetWord)==0)
				return current;
			else{
				HashSet<String> newWords = oneStep(current.get(current.size()-1));
				for(Iterator<String> i = newWords.iterator(); i.hasNext();){
					String newWord = i.next();
					if(!used.contains(newWord)){
						used.add(newWord);
						ArrayList<String> new_list = new ArrayList<String>();
						new_list.addAll(current);
						new_list.add(newWord);
						q.add(new_list);
					}
				}
			}
		}
		System.out.println("No path available");
		return null;
	}
	public static void main(String[] args){
		double time = System.currentTimeMillis();
		ArrayList<String> solution = createLadder("feat", "peek");
		if(solution!=null)
			for(int i=0; i<solution.size(); i++){
				System.out.print(solution.get(i)+" ");
			}
			System.out.println();
		System.out.println(System.currentTimeMillis()-time);
	}
}
